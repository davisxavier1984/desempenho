"""
Aplicativo de An√°lise de Desempenho do Previne Brasil

Este aplicativo apresenta uma an√°lise visual e textual dos indicadores 
do programa Previne Brasil para os munic√≠pios selecionados.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import json
from pathlib import Path
import re
import logging
from datetime import datetime
import os
from dotenv import load_dotenv
import traceback


# Carregar vari√°veis de ambiente do arquivo .env (se existir)
load_dotenv()

# Configura√ß√£o do logger antes da importa√ß√£o do genai para evitar NameError
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='app_desempenho.log'
)
logger = logging.getLogger('app_desempenho')

# Tentativa de importar o Google Generative AI
try:
    from google import genai
    from google.genai import types
    HAS_GENAI = True
    # Desativar IA se a vers√£o da biblioteca n√£o suportar a interface Client
    if not hasattr(genai, 'Client'):
        HAS_GENAI = False
        logger.warning("Vers√£o incompat√≠vel do google-genai instalada. An√°lise com IA desativada.")
except ImportError:
    HAS_GENAI = False
    logger.warning("Google Generative AI n√£o est√° dispon√≠vel. Para instalar: pip install google-genai")

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes da p√°gina Streamlit
st.set_page_config(
    page_title="An√°lise Hist√≥rica - Previne Brasil",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS simplificado
st.markdown("""
<style>
    .title { text-align: center; font-weight: bold; color: #1E3A8A; }
    .subtitle { text-align: center; color: #1E3A8A; }
    .indicator { font-weight: bold; background-color: #f0f2f6; padding: 5px; border-radius: 5px; }
    .metric-good { color: #0A7B30; font-weight: bold; }
    .metric-medium { color: #FF9800; font-weight: bold; }
    .metric-bad { color: #D32F2F; font-weight: bold; }
    .main .block-container { max-width: 95%; padding-top: 1rem; padding-bottom: 1rem; }
</style>
""", unsafe_allow_html=True)

def carregar_dados_municipios():
    """Carrega dados dos munic√≠pios a partir de arquivos JSON"""
    diretorio_atual = Path(__file__).parent.absolute()
    municipios_dados = {}
    
    # Buscar arquivos JSON apenas no diret√≥rio atual
    arquivos_json = list(diretorio_atual.glob("*.json"))
    
    if not arquivos_json:
        logger.error("Nenhum arquivo JSON encontrado")
        return {}
    
    # Processar arquivos
    for arquivo in arquivos_json:
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                dados = json.load(f)
                
                # Verificar se o arquivo cont√©m dados de um munic√≠pio
                if isinstance(dados, list) and dados and 'Municipio' in dados[0]:
                    municipio_nome = dados[0]['Municipio']
                    municipios_dados[municipio_nome] = dados
                    logger.info(f"Carregado munic√≠pio: {municipio_nome} do arquivo {arquivo.name}")
        except Exception as e:
            logger.error(f"Erro ao processar {arquivo}: {str(e)}")
    
    return municipios_dados

def extrair_periodos(dados):
    """Extrai per√≠odos dispon√≠veis nos dados"""
    periodos = []
    for item in dados[0]:
        if re.match(r'^\d{4}\s+Q\d+\s+\(%\)$', item):
            periodos.append(item)
    return sorted(periodos)

def preparar_dados_indicador(dados, indicador):
    """Prepara dados de um indicador para visualiza√ß√£o"""
    for item in dados:
        if item.get('Indicador') == indicador:
            dados_periodos = {'Per√≠odo': [], 'Valor (%)': [], 'Ano': [], 'Quadrimestre': []}
            
            # Extrair dados de per√≠odos
            for chave, valor in item.items():
                if re.match(r'^\d{4}\s+Q\d+\s+\(%\)$', chave):
                    partes = chave.split()
                    ano = int(partes[0])
                    quadrimestre = partes[1]
                    
                    dados_periodos['Per√≠odo'].append(chave)
                    try:
                        valor_num = float(valor.replace(',', '.')) if isinstance(valor, str) else float(valor)
                    except (ValueError, TypeError):
                        valor_num = 0
                    
                    dados_periodos['Valor (%)'].append(valor_num)
                    dados_periodos['Ano'].append(ano)
                    dados_periodos['Quadrimestre'].append(quadrimestre)
            
            df = pd.DataFrame(dados_periodos)
            
            # Ordenar cronologicamente
            if not df.empty:
                df['ordem'] = df['Ano']*10 + df['Quadrimestre'].str[1:].astype(int)
                df = df.sort_values('ordem').reset_index(drop=True)
                df.drop('ordem', axis=1, inplace=True)
                df['Ano_Quadrimestre'] = df['Ano'].astype(str) + ' - ' + df['Quadrimestre']
                
            return df
            
    return None

def criar_grafico_linha(df, indicador, meta=None):
    """Cria gr√°fico de linha para evolu√ß√£o do indicador"""
    if df is None or df.empty:
        return None
    
    # Cores por ano
    cores = {2022: '#1f77b4', 2023: '#ff7f0e', 2024: '#2ca02c', 2025: '#d62728'}
    
    # Criar figura
    fig = go.Figure()
    
    # Adicionar linha de meta
    if meta is not None:
        # Usar coordenadas que funcionem com todos os tipos de eixos x
        fig.add_shape(
            type="line",
            xref="paper",
            x0=0,
            y0=meta,
            x1=1,
            y1=meta,
            line=dict(color="red", width=1, dash="dash"),  # Linha mais grossa
        )
        fig.add_annotation(
            xref="paper",
            x=0.02,
            y=meta,
            text=f"Meta: {meta}%",
            showarrow=False,
            font=dict(color="red", size=10, family="Arial Black"),  # Fonte maior e mais destacada
            bgcolor="rgba(255,255,255,0.8)",
        )
    
    # Plotar linha por ano
    for ano in sorted(df['Ano'].unique()):
        df_ano = df[df['Ano'] == ano]
        if not df_ano.empty:
            fig.add_trace(go.Scatter(
                x=df_ano['Ano_Quadrimestre'],
                y=df_ano['Valor (%)'],
                mode='lines+markers+text',
                name=f'Ano {ano}',
                line=dict(color=cores.get(ano, '#1f77b4'), width=3),
                marker=dict(size=10),
                text=[f"{valor}%" for valor in df_ano['Valor (%)']],
                textposition="top center"
            ))
    
    # Adicionar linha de tend√™ncia se houver dados suficientes
    if len(df) >= 3:
        x_indices = list(range(len(df)))
        y_valores = df['Valor (%)'].values
        
        z = np.polyfit(x_indices, y_valores, 1)
        p = np.poly1d(z)
        tendencia_y = p(x_indices)
        
        fig.add_trace(go.Scatter(
            x=df['Ano_Quadrimestre'],
            y=tendencia_y,
            mode='lines',
            name='Tend√™ncia',
            line=dict(color='purple', width=2, dash='dot')
        ))
    
    # Verificar se estamos tratando do ISF (que n√£o √© percentual)
    is_isf = "Sint√©tico Final (ISF)" in indicador
    
    # Configurar layout
    fig.update_layout(
        title=f'Evolu√ß√£o Hist√≥rica: {indicador}',
        title_font=dict(size=18, color="#2C5282"),
        xaxis_title="Per√≠odo",
        yaxis_title="Valor" if is_isf else "Valor (%)",
        yaxis=dict(range=[0, 10 if is_isf else max(105, df['Valor (%)'].max() + 10)]),
        height=500,
        template="plotly_white",
        showlegend=True  # Garantir que a legenda seja exibida
    )
    
    return fig

def encontrar_meta_para_indicador(indicador):
    """
    Retorna a meta para um indicador baseado em seu nome.
    
    Args:
        indicador: Nome do indicador
    
    Returns:
        float: Valor da meta ou None se n√£o encontrada
    """
    # Metas definidas para cada indicador
    metas = {
        "1.  Propor√ß√£o de gestantes com pelo menos 6 (seis) consultas pr√©-natal realizadas, sendo a 1¬™ (primeira) at√© a 12¬™ (d√©cima segunda) semana de gesta√ß√£o": 45,
        "2. Propor√ß√£o de gestantes com realiza√ß√£o de exames para s√≠filis e HIV": 60,
        "3. Propor√ß√£o de gestantes com atendimento odontol√≥gico realizado": 60,
        "4. Propor√ß√£o de mulheres com coleta de citopatol√≥gico na APS": 40,
        "5.  Propor√ß√£o de crian√ßas de 1 (um) ano de idade vacinadas na APS contra Difteria, T√©tano, Coqueluche, Hepatite B, infec√ß√µes causadas por haemophilus influenzae tipo b e Poliomielite inativada": 95,
        "6.  Propor√ß√£o de pessoas com hipertens√£o, com consulta e press√£o arterial aferida no semestre": 50,
        "7.  Propor√ß√£o de pessoas com diabetes, com consulta e hemoglobina glicada solicitada no semestre": 50,
        "Indicador Sint√©tico Final (ISF)": 7
    }
    
    # Busca direta pela chave exata
    if indicador in metas:
        return metas[indicador]
    
    # Busca por palavras-chave se n√£o encontrar correspond√™ncia exata
    palavras_chave = {
        'gestantes': 60,
        'pr√©-natal': 45,
        's√≠filis': 60,
        'hiv': 60,
        'odontol√≥gico': 60,
        'citopatol√≥gico': 40,
        'mulheres': 40,
        'crian√ßas': 95,
        'vacinadas': 95,
        'hipertens√£o': 50,
        'diabetes': 50,
        'isf': 7
    }
    
    indicador_lower = indicador.lower()
    for palavra, meta in palavras_chave.items():
        if palavra in indicador_lower:
            return meta
            
    return None

def criar_grafico_radar(dados, ultimo_periodo=None):
    """Cria gr√°fico radar para comparar indicadores"""
    if not dados:
        return None
    
    # Identificar √∫ltimo per√≠odo se n√£o fornecido
    if ultimo_periodo is None:
        periodos = set()
        for item in dados:
            for chave in item.keys():
                if re.match(r'^\d{4}\s+Q\d+\s+\(%\)$', chave):
                    periodos.add(chave)
        ultimo_periodo = max(periodos) if periodos else None
    
    if not ultimo_periodo:
        return None
    
    # Coletar dados para o gr√°fico
    indicadores = []
    valores = []
    metas_valores = []
    
    for item in dados:
        ind = item.get('Indicador', '')
        # Excluir o ISF do gr√°fico radar
        if ind and ultimo_periodo in item and 'ISF' not in ind:
            # Nome simplificado do indicador
            nome_curto = ind.replace('Propor√ß√£o de ', '').replace(' realizado', '')
            nome_curto = nome_curto[:40] + '...' if len(nome_curto) > 40 else nome_curto
            
            # Converter o valor para n√∫mero
            valor_str = item.get(ultimo_periodo, '0')
            try:
                valor = float(valor_str.replace(',', '.')) if isinstance(valor_str, str) else float(valor_str)
            except (ValueError, TypeError):
                valor = 0
                
            indicadores.append(nome_curto)
            valores.append(valor)
            
            # Adicionar a meta espec√≠fica deste indicador
            meta_valor = encontrar_meta_para_indicador(ind)
            metas_valores.append(meta_valor or 70)  # Usa 70 como fallback
    
    if not indicadores:
        return None
    
    # Criar gr√°fico radar
    indicadores_plot = indicadores + [indicadores[0]]  # Fechar o pol√≠gono
    valores_plot = valores + [valores[0]]
    metas_plot = metas_valores + [metas_valores[0]]  # Fechar o pol√≠gono de metas
    
    fig = go.Figure()
    
    # Primeiro: adicionar os valores dos indicadores
    fig.add_trace(go.Scatterpolar(
        r=valores_plot,
        theta=indicadores_plot,
        fill='toself',
        mode='lines+markers+text',
        line_color='blue',
        fillcolor='rgba(0, 128, 255, 0.3)',
        text=[f"{valor:.1f}%" for valor in valores_plot],
        name='Valor Atual'
    ))
    
    # Depois: adicionar a linha de meta
    fig.add_trace(go.Scatterpolar(
        r=metas_plot,
        theta=indicadores_plot,
        fill=None,
        mode='lines',
        line=dict(
            color='red',
            width=3,
            dash='dash'
        ),
        opacity=1.0,
        name='Meta'
    ))
    
    fig.update_layout(
        title=f"Comparativo de Indicadores - {ultimo_periodo}",
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )
        ),
        height=600,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.1,
            xanchor="center",
            x=0.5
        )
    )
    
    return fig

def criar_grafico_isf(df):
    """Cria gr√°fico de barras para a evolu√ß√£o do ISF (de 0 a 10)"""
    if df is None or df.empty:
        return None
    
    # Cores para as barras
    paleta_cores = px.colors.qualitative.Safe
    
    # Criar figura de barras com plotly
    fig = go.Figure()
    
    # Adicionar barras para cada per√≠odo
    fig.add_trace(go.Bar(
        x=df['Ano_Quadrimestre'],
        y=df['Valor (%)'],
        text=[f"{valor:.1f}" for valor in df['Valor (%)']],
        textposition='auto',
        marker_color=[paleta_cores[i % len(paleta_cores)] for i in range(len(df))],
        name='ISF'
    ))
    
    # Adicionar linha de meta se definida (normalmente 7)
    meta = 7  # Meta t√≠pica para ISF
    fig.add_shape(
        type="line", 
        x0=-0.5, 
        y0=meta, 
        x1=len(df)-0.5, 
        y1=meta,
        line=dict(color="red", width=3, dash="dash"),
    )
    fig.add_annotation(
        x=0, 
        y=meta+0.3, 
        text=f"Meta: {meta}",
        showarrow=False, 
        font=dict(color="red", size=14, family="Arial Black"),
        bgcolor="rgba(255,255,255,0.8)",
        bordercolor="red",
        borderwidth=2,
        borderpad=4
    )
    
    # Adicionar linha de tend√™ncia se houver dados suficientes
    if len(df) >= 3:
        x_indices = list(range(len(df)))
        y_valores = df['Valor (%)'].values
        
        z = np.polyfit(x_indices, y_valores, 1)
        p = np.poly1d(z)
        tendencia_y = p(x_indices)
        
        fig.add_trace(go.Scatter(
            x=df['Ano_Quadrimestre'],
            y=tendencia_y,
            mode='lines',
            name='Tend√™ncia',
            line=dict(color='purple', width=2, dash='dot')
        ))
    
    # Configurar layout
    fig.update_layout(
        title='Evolu√ß√£o do Indicador Sint√©tico Final (ISF)',
        title_font=dict(size=18, color="#2C5282"),
        xaxis_title="Per√≠odo",
        yaxis_title="Valor ISF (0-10)",
        yaxis=dict(range=[0, 10]),
        height=500,
        template="plotly_white",
        showlegend=True  # Garantir que a legenda seja exibida
    )
    
    return fig

def calcular_estatisticas(df):
    """Calcula estat√≠sticas do indicador"""
    if df is None or df.empty or len(df) < 2:
        return None
    
    estatisticas = {
        'media': np.mean(df['Valor (%)']),
        'mediana': np.median(df['Valor (%)']),
        'minimo': np.min(df['Valor (%)']),
        'maximo': np.max(df['Valor (%)']),
        'ultimo_valor': df['Valor (%)'].iloc[-1],
        'penultimo_valor': df['Valor (%)'].iloc[-2] if len(df) > 1 else None,
        'variacao_ultimo': df['Valor (%)'].iloc[-1] - df['Valor (%)'].iloc[-2] if len(df) > 1 else None,
        'tendencia': 'est√°vel'
    }
    
    # Determinar tend√™ncia com base nos √∫ltimos 3 valores
    if len(df) >= 3:
        ultimos_valores = df['Valor (%)'].iloc[-3:].tolist()
        diferencas = [ultimos_valores[i+1] - ultimos_valores[i] for i in range(len(ultimos_valores)-1)]
        
        if all(d > 0 for d in diferencas):
            estatisticas['tendencia'] = 'crescimento'
        elif all(d < 0 for d in diferencas):
            estatisticas['tendencia'] = 'queda'
        else:
            estatisticas['tendencia'] = 'oscila√ß√£o'
    
    return estatisticas

def calcular_isf(dados):
    """
    Calcula o Indicador Sint√©tico Final (ISF) para cada quadrimestre
    usando a metodologia oficial do Previne Brasil com pondera√ß√£o
    O ISF √© um valor de 0 a 10 (n√£o um percentual)
    """
    import math  # Para c√°lculos de soma mais precisos
    
    # Identificar todos os per√≠odos dispon√≠veis
    periodos = set()
    for item in dados:
        for chave in item.keys():
            if re.match(r'^\d{4}\s+Q\d+\s+\(%\)$', chave):
                periodos.add(chave)
    
    # Ordenar per√≠odos cronologicamente
    periodos = sorted(list(periodos))
    logger.info(f"Per√≠odos identificados: {periodos}")
    
    # Definir metas e pondera√ß√µes para cada indicador (conforme metodologia oficial)
    config_indicadores = {
        "1.  Propor√ß√£o de gestantes com pelo menos 6 (seis) consultas pr√©-natal realizadas, sendo a 1¬™ (primeira) at√© a 12¬™ (d√©cima segunda) semana de gesta√ß√£o": 
            {"meta": 45, "ponderacao": 1},
        "2. Propor√ß√£o de gestantes com realiza√ß√£o de exames para s√≠filis e HIV": 
            {"meta": 60, "ponderacao": 1},
        "3. Propor√ß√£o de gestantes com atendimento odontol√≥gico realizado": 
            {"meta": 60, "ponderacao": 2},
        "4. Propor√ß√£o de mulheres com coleta de citopatol√≥gico na APS": 
            {"meta": 40, "ponderacao": 1},
        "5.  Propor√ß√£o de crian√ßas de 1 (um) ano de idade vacinadas na APS contra Difteria, T√©tano, Coqueluche, Hepatite B, infec√ß√µes causadas por haemophilus influenzae tipo b e Poliomielite inativada": 
            {"meta": 95, "ponderacao": 2},
        "6.  Propor√ß√£o de pessoas com hipertens√£o, com consulta e press√£o arterial aferida no semestre": 
            {"meta": 50, "ponderacao": 2},
        "7.  Propor√ß√£o de pessoas com diabetes, com consulta e hemoglobina glicada solicitada no semestre": 
            {"meta": 50, "ponderacao": 1}
    }
    
    # Inicializar dicion√°rio para armazenar ISF por per√≠odo
    isf_calculado = {}
    
    # Fun√ß√£o auxiliar para converter texto em n√∫mero
    def parse_valor(valor_texto):
        if not valor_texto:
            return 0
        
        valor_original = valor_texto
        # Remover caracteres n√£o num√©ricos, exceto ponto e v√≠rgula
        valor_limpo = ''.join(c for c in str(valor_texto) if c.isdigit() or c in '.,')
        
        # Substituir v√≠rgula por ponto (formato brasileiro para decimal)
        valor_limpo = valor_limpo.replace(',', '.')
        
        try:
            valor_final = float(valor_limpo)
            logger.info(f"Convers√£o de valor: {valor_original} -> {valor_final}")
            return valor_final
        except (ValueError, TypeError):
            logger.warning(f"N√£o foi poss√≠vel converter valor '{valor_texto}' para n√∫mero")
            return 0
    
    # Calcular ISF para cada per√≠odo
    for periodo in periodos:
        logger.info(f"\n=== Calculando ISF para {periodo} ===")
        resultados_ponderados = []
        indicadores_processados = []
        
        # Processar cada indicador para este per√≠odo
        for item in dados:
            if 'Indicador' in item:
                indicador_nome = item['Indicador']
                
                # Verificar se o indicador est√° na configura√ß√£o
                config = config_indicadores.get(indicador_nome)
                
                if config and periodo in item:
                    # Obter e converter o resultado para n√∫mero
                    resultado = parse_valor(item[periodo])
                    meta = config["meta"]
                    ponderacao = config["ponderacao"]
                    
                    # Calcular pontua√ß√£o (resultado/meta * 10, limitado a 10)
                    if meta > 0:  # Evitar divis√£o por zero
                        pontuacao = min(10, (resultado / meta) * 10)
                    else:
                        pontuacao = 0
                    
                    # Calcular resultado ponderado
                    resultado_ponderado = pontuacao * ponderacao
                    resultados_ponderados.append(resultado_ponderado)
                    
                    # Registrar o indicador processado para diagn√≥stico
                    indicadores_processados.append({
                        "nome": indicador_nome,
                        "valor_convertido": resultado,
                        "meta": meta,
                        "ponderacao": ponderacao,
                        "pontuacao": pontuacao,
                        "resultado_ponderado": resultado_ponderado
                    })
        
        # Calcular ISF para este per√≠odo (soma ponderada / 10)
        if resultados_ponderados:
            soma_ponderada = math.fsum(resultados_ponderados)
            isf_calculado[periodo] = round(soma_ponderada / 10, 1)
            logger.info(f"ISF para {periodo}: {isf_calculado[periodo]}")
        else:
            isf_calculado[periodo] = 0
            logger.warning(f"Nenhum indicador encontrado para calcular ISF no per√≠odo {periodo}")
    
    # Criar um item no formato dos outros indicadores para o ISF
    isf_item = {
        'Indicador': 'Indicador Sint√©tico Final (ISF)',
        'ISF': True  # Marcador para identificar que este √© o ISF
    }
    
    # Adicionar os valores calculados do ISF para cada per√≠odo
    for periodo, valor in isf_calculado.items():
        isf_item[periodo] = str(valor)
    
    return isf_item

def analisar_com_gemini(dados, periodo, tema=None):
    """Analisa os dados usando a API do Google Gemini."""
    try:
        import os
        import google.generativeai as genai
        
        # Obter a chave API do ambiente
        api_key = os.environ.get("GOOGLE_API_KEY", None)
        if not api_key:
            logger.warning("Chave API do Google Gemini n√£o encontrada nas vari√°veis de ambiente")
            return "An√°lise com IA n√£o dispon√≠vel - configure a chave API do Google Gemini"
        
        # Configure a API
        genai.configure(api_key=api_key)
        
        # Preparar prompt com os dados
        prompt = f"Analise em at√© dois paragrafos, destacando apenas os pontos positivos, os seguintes indicadores de sa√∫de para o per√≠odo {periodo}:\n\n"
        if tema:
            prompt += f"Tema solicitado: {tema}\n\n"
        
        prompt += "Indicadores:\n"
        
        # Verificar se dados √© um dicion√°rio ou uma lista
        if isinstance(dados, list):
            for indicador in dados:
                if isinstance(indicador, dict) and 'Indicador' in indicador:
                    prompt += f"- {indicador['Indicador']}: {indicador.get(periodo, 'N/A')}\n"
        elif isinstance(dados, dict):
            for chave, valor in dados.items():
                prompt += f"- {chave}: {valor.get(periodo, 'N/A')}\n"
        
        # Usar a nova API para gerar o texto
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        
        # Extrair o texto da resposta
        if hasattr(response, 'text'):
            return response.text
        elif hasattr(response, 'parts'):
            return ''.join(part.text for part in response.parts if hasattr(part, 'text'))
        else:
            return "An√°lise n√£o gerada - formato de resposta n√£o reconhecido"
    except Exception as e:
        logger.error(f"Erro ao usar a API do Google Gemini: {str(e)}")
        return f"Erro ao usar a API do Google Gemini: {str(e)}"

def gerar_analise_textual(indicador, estatisticas, meta=None):
    """
    Gera uma an√°lise textual para um indicador com base em suas estat√≠sticas.
    
    Args:
        indicador: Nome do indicador
        estatisticas: Dicion√°rio com estat√≠sticas (media, mediana, minimo, maximo, etc.)
        meta: Valor da meta para este indicador
        
    Returns:
        String com a an√°lise textual formatada
    """
    if not estatisticas:
        return "Dados insuficientes para an√°lise."
    
    # Tratamento especial para ISF (escala 0-10)
    is_isf = "Sint√©tico Final (ISF)" in indicador
    
    # Extrair valores estat√≠sticos
    ultimo_valor = estatisticas.get('ultimo_valor', 0)
    penultimo_valor = estatisticas.get('penultimo_valor')
    variacao = estatisticas.get('variacao_ultimo')
    tendencia = estatisticas.get('tendencia', 'est√°vel')
    media = estatisticas.get('media', 0)
    
    # Formatar valores
    formato = ".1f"  # Uma casa decimal
    
    # Iniciar an√°lise
    analise = []
    
    # Cabe√ßalho
    if is_isf:
        analise.append(f"### An√°lise do {indicador}")
    else:
        analise.append(f"### An√°lise do Indicador")
    
    # Compara√ß√£o com a meta
    if meta is not None:
        if ultimo_valor >= meta:
            if is_isf:
                analise.append(f"üü¢ **Meta atingida**: O valor atual √© {ultimo_valor:{formato}} (meta: {meta:{formato}}), o que representa **{(ultimo_valor/meta*100):{formato}}%** da meta estabelecida.")
            else:
                analise.append(f"üü¢ **Meta atingida**: O valor atual √© {ultimo_valor:{formato}}% (meta: {meta:{formato}}%), o que representa **{(ultimo_valor/meta*100):{formato}}%** da meta estabelecida.")
        else:
            if is_isf:
                analise.append(f"üî¥ **Meta n√£o atingida**: O valor atual √© {ultimo_valor:{formato}} (meta: {meta:{formato}}), o que representa **{(ultimo_valor/meta*100):{formato}}%** da meta estabelecida.")
            else:
                analise.append(f"üî¥ **Meta n√£o atingida**: O valor atual √© {ultimo_valor:{formato}}% (meta: {meta:{formato}}%), o que representa **{(ultimo_valor/meta*100):{formato}}%** da meta estabelecida.")
    
    # An√°lise de tend√™ncia
    if penultimo_valor is not None and variacao is not None:
        # Formato da varia√ß√£o
        if variacao > 0:
            if is_isf:
                analise.append(f"üìà **Evolu√ß√£o positiva**: Aumento de {abs(variacao):{formato}} pontos em rela√ß√£o ao per√≠odo anterior ({penultimo_valor:{formato}} ‚Üí {ultimo_valor:{formato}}).")
            else:
                analise.append(f"üìà **Evolu√ß√£o positiva**: Aumento de {abs(variacao):{formato}} pontos percentuais em rela√ß√£o ao per√≠odo anterior ({penultimo_valor:{formato}}% ‚Üí {ultimo_valor:{formato}}%).")
        elif variacao < 0:
            if is_isf:
                analise.append(f"üìâ **Evolu√ß√£o negativa**: Redu√ß√£o de {abs(variacao):{formato}} pontos em rela√ß√£o ao per√≠odo anterior ({penultimo_valor:{formato}} ‚Üí {ultimo_valor:{formato}}).")
            else:
                analise.append(f"üìâ **Evolu√ß√£o negativa**: Redu√ß√£o de {abs(variacao):{formato}} pontos percentuais em rela√ß√£o ao per√≠odo anterior ({penultimo_valor:{formato}}% ‚Üí {ultimo_valor:{formato}}%).")
        else:
            if is_isf:
                analise.append(f"‚û°Ô∏è **Estabilidade**: Manteve-se em {ultimo_valor:{formato}} pontos em rela√ß√£o ao per√≠odo anterior.")
            else:
                analise.append(f"‚û°Ô∏è **Estabilidade**: Manteve-se em {ultimo_valor:{formato}}% em rela√ß√£o ao per√≠odo anterior.")
    
    # An√°lise da tend√™ncia geral
    if tendencia == 'crescimento':
        analise.append(f"üìà **Tend√™ncia geral**: Em crescimento nos √∫ltimos per√≠odos.")
    elif tendencia == 'queda':
        analise.append(f"üìâ **Tend√™ncia geral**: Em queda nos √∫ltimos per√≠odos.")
    elif tendencia == 'oscila√ß√£o':
        analise.append(f"‚ÜïÔ∏è **Tend√™ncia geral**: Com oscila√ß√µes nos √∫ltimos per√≠odos.")
    else:
        analise.append(f"‚û°Ô∏è **Tend√™ncia geral**: Relativamente est√°vel.")
    
    # Compara√ß√£o com m√©dia hist√≥rica
    if ultimo_valor > media:
        if is_isf:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}} est√° **acima** da m√©dia hist√≥rica ({media:{formato}}).")
        else:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}}% est√° **acima** da m√©dia hist√≥rica ({media:{formato}}%).")
    elif ultimo_valor < media:
        if is_isf:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}} est√° **abaixo** da m√©dia hist√≥rica ({media:{formato}}).")
        else:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}}% est√° **abaixo** da m√©dia hist√≥rica ({media:{formato}}%).")
    else:
        if is_isf:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}} est√° **igual** √† m√©dia hist√≥rica.")
        else:
            analise.append(f"üìä O valor atual de {ultimo_valor:{formato}}% est√° **igual** √† m√©dia hist√≥rica.")
    
    # Recomenda√ß√µes espec√≠ficas para o ISF
    if is_isf:
        if ultimo_valor < 7:
            analise.append("\n#### Recomenda√ß√µes")
            analise.append("- Focar na melhoria dos indicadores com maior peso na composi√ß√£o do ISF")
            analise.append("- Implementar monitoramento frequente dos indicadores cr√≠ticos")
            analise.append("- Considerar ajustes nas estrat√©gias de sa√∫de para √°reas deficit√°rias")
    # Recomenda√ß√µes para outros indicadores
    elif meta is not None and ultimo_valor < meta:
        analise.append("\n#### Recomenda√ß√µes")
        
        # Recomenda√ß√µes espec√≠ficas por tipo de indicador
        if "gestantes" in indicador.lower():
            analise.append("- Refor√ßar a busca ativa de gestantes na √°rea de abrang√™ncia")
            analise.append("- Garantir agendamento priorit√°rio para consultas de pr√©-natal")
            analise.append("- Implementar lembretes para consultas e exames")
        elif "mulheres" in indicador.lower() and "citopatol√≥gico" in indicador.lower():
            analise.append("- Aumentar campanhas de conscientiza√ß√£o sobre a import√¢ncia do exame preventivo")
            analise.append("- Facilitar o acesso ao exame com hor√°rios estendidos")
            analise.append("- Realizar busca ativa de mulheres na faixa et√°ria alvo")
        elif "crian√ßas" in indicador.lower() and "vacina" in indicador.lower():
            analise.append("- Intensificar campanhas de vacina√ß√£o nas √°reas com menor cobertura")
            analise.append("- Implementar sistema de lembretes para pais/respons√°veis")
            analise.append("- Realizar busca ativa de crian√ßas com calend√°rio vacinal atrasado")
        elif "hipertens√£o" in indicador.lower():
            analise.append("- Aprimorar o acompanhamento dos hipertensos cadastrados")
            analise.append("- Implementar grupos de educa√ß√£o em sa√∫de para hipertensos")
            analise.append("- Facilitar o acesso √†s consultas e aferi√ß√£o de press√£o arterial")
        elif "diabetes" in indicador.lower():
            analise.append("- Intensificar o monitoramento dos pacientes diab√©ticos")
            analise.append("- Garantir a solicita√ß√£o rotineira de hemoglobina glicada")
            analise.append("- Promover a√ß√µes de educa√ß√£o em sa√∫de para pacientes diab√©ticos")
        else:
            analise.append("- Analisar fatores que impactam negativamente o indicador")
            analise.append("- Implementar estrat√©gias espec√≠ficas para melhorar o desempenho")
            analise.append("- Monitorar periodicamente os resultados")
    
    return "\n".join(analise)

def mostrar_analise_ia(dados, periodo, container, indicador=None):
    """
    Exibe an√°lise de IA em um container do Streamlit.
    
    Args:
        dados: Dados completos ou filtrados para an√°lise
        periodo: Per√≠odo a ser analisado (ex: '2023 Q3 (%)')
        container: Container do Streamlit para exibir a an√°lise
        indicador: Nome do indicador espec√≠fico (opcional)
    """
    with container:
        with st.spinner("Gerando an√°lise com IA..."):
            try:
                # Filtrar dados para o indicador espec√≠fico se fornecido
                if indicador:
                    dados_filtrados = [item for item in dados if item.get('Indicador') == indicador]
                    if not dados_filtrados:
                        st.warning(f"N√£o foram encontrados dados para o indicador: {indicador}")
                        return
                    analise = analisar_com_gemini(dados_filtrados, periodo)
                else:
                    analise = analisar_com_gemini(dados, periodo)
                    
                st.markdown(analise)
            except Exception as e:
                st.error(f"Erro ao gerar an√°lise com IA: {str(e)}")
                logger.error(f"Erro na an√°lise IA: {str(e)}\n{traceback.format_exc()}")
                st.info("Continue usando as outras funcionalidades do aplicativo.")

def gerar_dashboard(municipio, dados):
    """Gera o dashboard principal com visualiza√ß√µes"""
    # Calcular o ISF e adicionar aos dados
    isf_item = calcular_isf(dados)
    dados.append(isf_item)
    
    st.markdown(f'<h1 class="title">An√°lise Hist√≥rica - Previne Brasil: {municipio}</h1>', unsafe_allow_html=True)
    
    st.write("""
    ## Sobre o Previne Brasil
    
    O **Previne Brasil** √© um programa de financiamento da Aten√ß√£o Prim√°ria √† Sa√∫de (APS) que 
    determina o valor dos repasses federais aos munic√≠pios com base no desempenho em indicadores
    de sa√∫de. Esta an√°lise apresenta a evolu√ß√£o hist√≥rica dos indicadores ao longo do tempo.
    """)
    
    # Informa√ß√µes b√°sicas do munic√≠pio
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Informa√ß√µes do Munic√≠pio")
        if dados and len(dados) > 0:
            st.write(f"**Estado:** {dados[0].get('UF', 'N/A')}")
            st.write(f"**C√≥digo IBGE:** {dados[0].get('IBGE', 'N/A')}")
            st.write(f"**Total de indicadores:** {len(dados)}")
    
    # Per√≠odos analisados
    if dados and len(dados) > 0:
        periodos = extrair_periodos(dados)
        with col2:
            st.subheader("Per√≠odos Analisados")
            st.write(f"**Primeiro per√≠odo:** {periodos[0] if periodos else 'N/A'}")
            st.write(f"**√öltimo per√≠odo:** {periodos[-1] if periodos else 'N/A'}")
            st.write(f"**Total de per√≠odos:** {len(periodos)}")
    
    # Gr√°fico radar com panorama geral
    st.subheader("Panorama Geral dos Indicadores")
    radar_fig = criar_grafico_radar(dados)
    if radar_fig:
        st.plotly_chart(radar_fig, use_container_width=True)
    else:
        st.error("Dados insuficientes para gerar o panorama geral.")
    
    st.markdown("---")
    
    # √Åreas estrat√©gicas de cada indicador
    areas_estrategicas = {
        "1.  Propor√ß√£o de gestantes com pelo menos 6 (seis) consultas pr√©-natal realizadas, sendo a 1¬™ (primeira) at√© a 12¬™ (d√©cima segunda) semana de gesta√ß√£o": "Pr√©-natal",
        "2. Propor√ß√£o de gestantes com realiza√ß√£o de exames para s√≠filis e HIV": "Pr√©-natal",
        "3. Propor√ß√£o de gestantes com atendimento odontol√≥gico realizado": "Sa√∫de Bucal",
        "4. Propor√ß√£o de mulheres com coleta de citopatol√≥gico na APS": "Sa√∫de da Mulher",
        "5.  Propor√ß√£o de crian√ßas de 1 (um) ano de idade vacinadas na APS contra Difteria, T√©tano, Coqueluche, Hepatite B, infec√ß√µes causadas por haemophilus influenzae tipo b e Poliomielite inativada": "Sa√∫de da Crian√ßa",
        "6.  Propor√ß√£o de pessoas com hipertens√£o, com consulta e press√£o arterial aferida no semestre": "Condi√ß√µes Cr√¥nicas",
        "7.  Propor√ß√£o de pessoas com diabetes, com consulta e hemoglobina glicada solicitada no semestre": "Condi√ß√µes Cr√¥nicas",
        "Indicador Sint√©tico Final (ISF)": "Indicador Sint√©tico"
    }
    
    # An√°lise por indicador
    st.header("An√°lise Hist√≥rica dos Indicadores")
    
    modo_visualizacao = st.radio(
        "Escolha o modo de visualiza√ß√£o:",
        ["Visualiza√ß√£o em abas", "Visualiza√ß√£o em lista"],
        horizontal=True
    )
    
    # Extrair lista de indicadores dos dados
    indicadores_unicos = []
    for item in dados:
        if 'Indicador' in item:
            indicador = item['Indicador']
            if indicador not in indicadores_unicos:
                if indicador != "Indicador Sint√©tico Final (ISF)":  # Deixar o ISF para o final
                    indicadores_unicos.append(indicador)
    
    # Adicionar o ISF ao final
    for item in dados:
        if 'Indicador' in item and item['Indicador'] == "Indicador Sint√©tico Final (ISF)":
            indicadores_unicos.append(item['Indicador'])
            break
    
    if modo_visualizacao == "Visualiza√ß√£o em abas":
        # Criar abas para cada indicador
        tabs = st.tabs([f"Ind. {i+1}" if indicadores_unicos[i] != "Indicador Sint√©tico Final (ISF)" else "ISF" 
                       for i in range(len(indicadores_unicos))])
        
        for i, tab in enumerate(tabs):
            with tab:
                indicador = indicadores_unicos[i]
                area = areas_estrategicas.get(indicador, "")
                
                # Mostrar n√∫mero do indicador e √°rea estrat√©gica
                if indicador == "Indicador Sint√©tico Final (ISF)":
                    st.subheader(f"ISF: {indicador}")
                else:
                    st.subheader(f"Indicador {i+1}: {indicador}")
                
                st.write(f"**√Årea Estrat√©gica:** {area}")
                
                df_indicador = preparar_dados_indicador(dados, indicador)
                
                if df_indicador is not None and not df_indicador.empty:
                    estatisticas = calcular_estatisticas(df_indicador)
                    meta = encontrar_meta_para_indicador(indicador)
                    
                    # Gr√°fico de evolu√ß√£o - especial para ISF
                    if indicador == "Indicador Sint√©tico Final (ISF)":
                        fig = criar_grafico_isf(df_indicador)
                    else:
                        fig = criar_grafico_linha(df_indicador, indicador, meta)
                        
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # An√°lise textual tradicional
                    analise = gerar_analise_textual(indicador, estatisticas, meta)
                    st.markdown(analise)
                    
                    # Adicionar an√°lise do Gemini com tratamento de erro melhorado
                    with st.expander("ü§ñ An√°lise avan√ßada com IA"):
                        # Obter o √∫ltimo per√≠odo para este indicador
                        ultimo_periodo = periodos[-1] if periodos else None
                        if ultimo_periodo:
                            mostrar_analise_ia(dados, ultimo_periodo, st.container(), indicador)
                        else:
                            st.warning("Per√≠odo n√£o identificado para an√°lise com IA.")
                else:
                    st.warning("Dados insuficientes para este indicador.")
    else:
        # Visualiza√ß√£o em lista
        for i, indicador in enumerate(indicadores_unicos):
            area = areas_estrategicas.get(indicador, "")
            
            # Mostrar n√∫mero do indicador e √°rea estrat√©gica
            if indicador == "Indicador Sint√©tico Final (ISF)":
                st.subheader(f"ISF: {indicador}")
            else:
                st.subheader(f"{i+1}. {indicador}")
            
            st.write(f"**√Årea Estrat√©gica:** {area}")
            
            df_indicador = preparar_dados_indicador(dados, indicador)
            
            if df_indicador is not None and not df_indicador.empty:
                estatisticas = calcular_estatisticas(df_indicador)
                meta = encontrar_meta_para_indicador(indicador)
                
                # Resumo r√°pido
                col1, col2, col3 = st.columns([1, 1, 1])
                
                # Valor atual com indica√ß√£o visual - tratamento especial para ISF
                valor_atual = estatisticas['ultimo_valor'] if estatisticas else 0
                if indicador == "Indicador Sint√©tico Final (ISF)":
                    # Para ISF, a escala √© de 0-10, n√£o percentual
                    if valor_atual >= (meta or 7):
                        col1.markdown(f"<div class='metric-good'>Atual: {valor_atual:.1f}</div>", unsafe_allow_html=True)
                    else:
                        col1.markdown(f"<div class='metric-bad'>Atual: {valor_atual:.1f}</div>", unsafe_allow_html=True)
                    
                    if meta:
                        col2.write(f"**Meta**: {meta:.1f}")
                else:
                    # Para os outros indicadores, continuamos com %
                    if valor_atual >= (meta or 70):
                        col1.markdown(f"<div class='metric-good'>Atual: {valor_atual:.1f}%</div>", unsafe_allow_html=True)
                    else:
                        col1.markdown(f"<div class='metric-bad'>Atual: {valor_atual:.1f}%</div>", unsafe_allow_html=True)
                    
                    if meta:
                        col2.write(f"**Meta**: {meta:.1f}%")
                
                col3.write(f"**√Årea**: {area}")
                
                # Exibir meta em todos os indicadores
                if meta:
                    st.progress(min(1.0, valor_atual / meta))
                    if indicador == "Indicador Sint√©tico Final (ISF)":
                        st.write(f"**Progresso em rela√ß√£o √† meta ({meta:.1f}):** {min(100, valor_atual/meta*100):.1f}%")
                    else:
                        st.write(f"**Progresso em rela√ß√£o √† meta ({meta:.1f}%):** {min(100, valor_atual/meta*100):.1f}%")
                
                # Gr√°fico de evolu√ß√£o - especial para ISF
                if indicador == "Indicador Sint√©tico Final (ISF)":
                    fig = criar_grafico_isf(df_indicador)
                else:
                    fig = criar_grafico_linha(df_indicador, indicador, meta)
                    
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                
                # An√°lise textual
                st.markdown(gerar_analise_textual(indicador, estatisticas, meta))
                
                # Adicionar an√°lise do Gemini com tratamento de erro melhorado
                with st.expander("ü§ñ An√°lise avan√ßada com IA"):
                    # Obter o √∫ltimo per√≠odo para este indicador
                    ultimo_periodo = periodos[-1] if periodos else None
                    if ultimo_periodo:
                        mostrar_analise_ia(dados, ultimo_periodo, st.container(), indicador)
                    else:
                        st.warning("Per√≠odo n√£o identificado para an√°lise com IA.")
            else:
                st.warning("Dados insuficientes para este indicador.")
            
            st.markdown("---")
    
    # Rodap√©
    st.caption(f"Dados atualizados at√© {periodos[-1] if periodos else 'data desconhecida'}. An√°lise gerada em {datetime.now().strftime('%d/%m/%Y')}.")
    st.caption("Fonte: Sistema de Informa√ß√£o em Sa√∫de para a Aten√ß√£o B√°sica (SISAB)")

def main():
    # Carregar dados
    municipios_dados = carregar_dados_municipios()
    
    # Barra lateral
    st.sidebar.title("Previne Brasil")
    
    # Tentar carregar logo
    logo_path = "logo.png"
    try:
        if Path(logo_path).exists():
            st.sidebar.image(logo_path, use_container_width=True)
        else:
            st.sidebar.write("Previne Brasil")
    except Exception as e:
        logger.error(f"Erro ao carregar logo: {str(e)}")
    
    if not municipios_dados:
        st.error("Nenhum dado de munic√≠pio encontrado! Verifique os arquivos JSON.")
        return
    
    # Sele√ß√£o de munic√≠pio
    municipios = list(municipios_dados.keys())
    municipio_selecionado = st.sidebar.selectbox("Selecione o Munic√≠pio:", municipios)
    
    # Informa√ß√µes sobre o programa
    st.sidebar.markdown("---")
    st.sidebar.subheader("Sobre o Previne Brasil")
    st.sidebar.info("""
    O Programa Previne Brasil foi institu√≠do pela Portaria n¬∫ 2.979/2019, 
    e estabelece novo modelo de financiamento da Aten√ß√£o Prim√°ria √† Sa√∫de.
    
    Indicadores avaliados:
    - Pr√©-natal
    - Sa√∫de da mulher
    - Imuniza√ß√£o infantil
    - Doen√ßas cr√¥nicas
    """)
    
    # Mostrar dashboard
    if municipio_selecionado:
        dados_municipio = municipios_dados[municipio_selecionado]
        gerar_dashboard(municipio_selecionado, dados_municipio)

if __name__ == "__main__":
    main()